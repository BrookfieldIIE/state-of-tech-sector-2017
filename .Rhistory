#######################
#Processing and defining tech sector occupations
#This will end up generating an individual ranking file that is accessible by other code that has a tech occupation in it.
library(data.table)
library(ggplot2)
library(ggthemes)
library(stringr)
library(openxlsx)
library(BFTheme)
library(extrafont)
library(psych)
crosswalk <- fread("NOC/onetnoc.csv") #Import Crosswalk file
knowledge <- read.xlsx("NOC/Knowledge.xlsx") #Import knowledge file
skill <- read.xlsx("NOC/Skills.xlsx") #Import skill file
work.activity <- read.xlsx("NOC/Work Activities.xlsx") #Import work activity file
work.style <- read.xlsx("NOC/Work Styles.xlsx") #Import work style file
#Combine skill knowledge and work activity in one thing
knowledge <- as.data.table(knowledge)
skill <- as.data.table(skill)
work.activity <- as.data.table(work.activity)
full.skill <- rbindlist(list(knowledge,skill,work.activity))
names(full.skill) <- c("onet","title","element.id","element.name","scale.id","scale.name","value","N","stder","lci","uci","sup","nr","date","source")
full.skill[,c("N","date","source","lci","uci"):=NULL]
#Use the crosswalk to crosswalk occupations over
setkey(crosswalk,onet)
setkey(full.skill,onet)
full.crosswalk.skill <- crosswalk[full.skill,nomatch=0]
full.avg.crosswalk.skill <- full.crosswalk.skill[,mean(value),by=.(noc_title,element.id,element.name,scale.id,scale.name)]
rm(full.crosswalk.skill) #Remove redundancies
rm(full.skill)
rm(work.activity,skill,knowledge)
#full.avg.crosswalk.skill[,tech.dum:=0] #Use full tech skill definition to define tech dummy
#for(n in seq(1,7)){
#  full.avg.crosswalk.skill[scale.id=="LV" & V1 >= n & element.id %in% unique(tech.skill.dic[anc.val==n & tech.dum=="Yes",element.id]),tech.dum:=1]
#}
#This makes this into a wide table, for explanatory purposes and not production run
#full.avg.crosswalk.skill.w <- reshape(full.avg.crosswalk.skill[scale.id=="LV"],v.names = c("V1"),timevar="element.id", idvar="noc_title",direction="wide",drop=c("element.name","tech.dum"))
#Set tech values only using core tech skills
#full.avg.crosswalk.skill[,tech.dum.2:=0]
#full.avg.crosswalk.skill[element.id %in% c("2.B.3.e","2.B.3.b","2.C.3.a","4.A.3.b.1","2.C.3.b","2.C.9.a"),tech.dum.2:=1]
#full.avg.crosswalk.skill[,prod:=prod(V1),by=.(noc_title,element.id)] #Multiply importance and levels
#noc.tech.score <- full.avg.crosswalk.skill[tech.dum.2==1 & scale.id=="IM",prod(prod),by=noc_title] #Add the product by occupations
#Transform work style and crosswalk over
work.style <- as.data.table(work.style)
names(work.style) <- c("onet","title","element.id","element.name","scale.id","scale.name","value","N","stder","lci","uci","sup","date","source")
work.style[,c("N","date","source","lci","uci"):=NULL]
setkey(work.style,onet)
setkey(crosswalk,onet)
full.crosswalk.style <- crosswalk[work.style,nomatch=0]
full.avg.crosswalk.style <- full.crosswalk.style[,mean(value),by=.(noc_title,element.id,element.name,scale.id,scale.name)]
rm(work.style,full.crosswalk.style)
full.avg.crosswalk.style.innovation <- full.avg.crosswalk.style[element.id=="1.C.7.a"]
full.avg.crosswalk.style.innovation[,c("element.id","element.name","scale.id","scale.name"):=NULL]
names(full.avg.crosswalk.style.innovation) <- c("noc_title","innovation")
#setkey(full.avg.crosswalk.style.innovation,noc_title)
#setkey(noc.tech.score,noc_title)
#noc.tech.score <- noc.tech.score[full.avg.crosswalk.style.innovation,nomatch=0]
#Set tech values using science skills
#full.avg.crosswalk.skill[,tech.dum.2:=0]
#full.avg.crosswalk.skill[element.id %in% c("2.C.4.a","2.C.4.b","2.C.4.c","2.C.4.d"),tech.dum.2:=1]
#full.avg.crosswalk.skill[,prod:=prod(V1),by=.(noc_title,element.id)] #Multiply importance and levels
#noc.science.score <- full.avg.crosswalk.skill[tech.dum.2==1 & scale.id=="IM",sum(prod),by=noc_title] #Add the product by occupations
#names(noc.science.score) <- c("noc_title","science")
#setkey(noc.science.score,noc_title)
#noc.tech.score <- noc.tech.score[noc.science.score,nomatch=0]
#noc.tech.score[,RD:=V1*innovation]
#noc.tech.score[,STEM:=V1+science]
#noc.tech.score[,tech:="Not Tech"] #Define tech
#noc.tech.score[STEM>=89 & innovation >= 3.39,tech:="Tech"] #Define not tech
#noc.tech.score[,rank.tech:=frankv(V1,order=-1)]
#noc.tech.score[,rank.science:=frankv(science,order=-1)]
#for(n in seq(1,484)){
#  noc.tech.score[n,harm.rank:=harmonic.mean(c(rank.tech,rank.science))]
#}
#Individual Ranking method
tech.skills <- c("2.C.4.a","2.C.4.b","2.C.4.c","2.C.4.d","2.B.3.e","2.B.3.b","2.C.3.a","4.A.3.b.1","2.C.3.b","2.C.9.a")
#Get all the raw points for each skills
individual.ranking <- full.avg.crosswalk.skill[element.id %in% tech.skills,prod(V1),by=.(noc_title,element.id)]
individual.ranking <- reshape(individual.ranking,direction="wide",v.names = c("V1"),timevar="element.id",idvar="noc_title")
#Merge all the tech skill raw score with innovation score
setkey(individual.ranking,noc_title)
setkey(full.avg.crosswalk.style.innovation,noc_title)
individual.ranking <- individual.ranking[full.avg.crosswalk.style.innovation,nomatch=0]
#Rank for all the tech skills
for(n in c(tech.skills)){
individual.ranking[,str_c("rank.",n):=frankv(get(str_c("V1.",n)),order=-1)]
}
#Rank for innovation work style
individual.ranking[,rank.V1.1.C.7.a:=frankv(innovation,order=-1)]
#Calculate the regular harmonic mean
for(n in seq(1,484)){
individual.ranking[n,harm.rank:=harmonic.mean(c(rank.2.C.4.a,rank.2.C.4.b,rank.2.C.4.c,
rank.2.C.4.d,rank.2.B.3.b,rank.2.B.3.e,
rank.2.C.3.a,rank.4.A.3.b.1,rank.2.C.3.b,rank.2.C.9.a))]
}
#Calculate the harmonic mean for tech skills only
for(n in seq(1,484)){
individual.ranking[n,harm.rank.tech:=harmonic.mean(c(rank.2.B.3.b+1,rank.2.B.3.e+1,
rank.2.C.3.a+1,rank.4.A.3.b.1+1,rank.2.C.3.b+1,rank.2.C.9.a+1))]
}
#Define the technology sector
individual.ranking[,tech:=0]
individual.ranking[harm.rank < 21, tech:=1]
#Write the CSV out
write.csv(individual.ranking,"tech.sector.def.csv",row.names=FALSE)
#Clean up the environment for the next file
rm(crosswalk,full.avg.crosswalk.skill,full.avg.crosswalk.style,full.avg.crosswalk.style.innovation,individual.ranking)
library(installr)
install.pacakges("installr")
install.packages("installr")
install.packages("installr")
install.packages("installr")
library(installr)
install.packages("survival")
library(data.table)
install.packages("data.table")
install.packages("ggplot2")
install.packages("ggthemes")
install.pacakges("stringr")
install.packages("stringr")
install.packages("openxlsx")
install.packages("foreign")
install.packages("extrafont")
library(extrafont)
font_import()
loadfonts()
fonttable()
install.pacakges("psych")
install.packages("psych")
library(extrafont)
fonttable()
library(BFTheme)
test.plot <- plot.map.prov.bf()
test.plot <- plot.map.cma.bf()
test.plot
library(mapproj)
install.packages("mapproj")
test.plot <- plot.map.cma.bf()
test.plot
loadfonts()
pdfFonts()
test.plot
library(data.table)
library(ggplot2)
library(ggthemes)
library(stringr)
library(openxlsx)
library(BFTheme)
library(extrafont)
library(psych)
test.plot <- ggplot(mtcars,aes(mpg,cyl)) +
geom_point() +
theme(axis.title.x = element.text(family="RooneySans Regular"))
test.plot <- ggplot(mtcars,aes(mpg,cyl)) +
geom_point() +
theme(axis.title.x = element_text(family="RooneySans Regular"))
test.plot
test.plot <- ggplot(mtcars,aes(mpg,cyl)) +
geom_point() +
theme(axis.title.x = element_text(family="RooneySans-Regular"))
test.plot
help(fonttable)
fonts()
help(element_text)
library(data.table)
library(ggplot2)
library(ggthemes)
library(stringr)
library(openxlsx)
library(BFTheme)
library(extrafont)
library(psych)
fonts()
test.plot <- ggplot(mtcars,aes(mpg,cyl)) +
geom_point() +
theme(axis.title.x = element_text(family="RooneySans-Regular"))
test.plot
export.bf.plot("test.plot",test.plot)
export.bf.plot
ggplot2::ggsave("test.plot.pdf",
plot=test.plot,
family = "RooneySans-Regular",
device = "eps", #Device used is pdf
width=p.width,
height=p.height,
pointsize=12,
bg = "transparent")
ggplot2::ggsave("test.plot.pdf",
plot=test.plot,
family = "RooneySans-Regular",
device = "eps", #Device used is pdf
width=7.25,
height=6,
pointsize=12,
bg = "transparent")
extrafont::embed_fonts("test.plot.pdf")
extrafont::embed_fonts("test.plot.pdf",options="-dEPSCrop")
ggplot2::ggsave("test.plot.pdf",
plot=test.plot,
family = "RooneySans-Regular",
device = "eps", #Device used is pdf
width=7.25,
height=6,
pointsize=12,
bg = "transparent")
extrafont::embed_fonts("test.plot.pdf",options="-dEPSCrop")
test.plot
font_import
ttf_import
ttf_extract
ttf_extract
ttf_extract()
library(extrafontrb)
library(extrafontdb)
remove.packages("extrafont")
remove.packages("extrafontdb")
install.pacakges("extrafont")
install.packages("extrafont")
install.packages("extrafont")
library(extrafont)
font_import()
import_font()
fonttable()
test.plot <- ggplot(mtcars,aes(mpg,cyl)) +
geom_point() +
theme(axis.title.x = element_text(family="RooneySans-Regular"))
test.plot
library(extrafont)
loadfonts()
test.plot <- ggplot(mtcars,aes(mpg,cyl)) +
geom_point() +
theme(axis.title.x = element_text(family="RooneySans-Regular"))
test.plot
test.plot <- ggplot(mtcars,aes(mpg,cyl)) +
geom_point() +
theme(axis.title.x = element_text(family="RooneySans Regular"))
test.plot
test.plot <- ggplot(mtcars,aes(mpg,cyl)) +
geom_point() +
theme(axis.title.x = element_text(family="RooneySans-Regular"))
test.plot
remove.packages("extrafont")
remove.packages("extrafontdb")
install.packages("extrafont")
install.packages("extrafont")
library(extrafont)
font_import()
loadfonts()
test.plot <- ggplot(mtcars,aes(mpg,cyl)) +
geom_point() +
theme(axis.title.x = element_text(family="RooneySans-Regular"))
library(ggplot2)
test.plot <- ggplot(mtcars,aes(mpg,cyl)) +
geom_point() +
theme(axis.title.x = element_text(family="RooneySans-Regular"))
test.plot
###########################
#Process the NAICS and NOC file to get to tech industries
library(data.table)
library(ggplot2)
library(extrafont)
library(BFTheme)
library(stringr)
source("NOC.R")
old.tech.noc <- c("0131","0211","0212","0213","2111","2112","2113","2114","2115","2121","2132","2133","2134",
"2142","2146","2147","2148","2161","2171","2172","2173","2174","2175","2211","2221","5223","5241")
#Get old tech noc in here for comparison reasons
naics.noc <- fread("TECH_IND/full_file.csv") #Read the main NAICS NOC file
individual.ranking <- fread("tech.sector.def.csv")
naics.noc <- melt(naics.noc,id.vars=c("Industry","Geography")) #Melt it to long form with industry and geography
names(naics.noc) <- c("industry","geography","occupation","count") #Change names to make it easier to deal with
naics.noc[,occupation:=as.character(occupation)] #Make occupations into characters
naics.noc <- naics.noc[count > 0] #Remove anything that has count of 0 - make it easy on the RAM :)
naics.noc[,occupation:=str_trim(occupation)] #Trim all the white spaces created due to B20/20 export
naics.noc[,industry:=str_trim(industry)] #Likewise, trim all the white spaces created due to B20/20 export
naics.noc[,noc:=tstrsplit(occupation," ",keep=1)] #Extract the NOC codes (and a few other things)
naics.noc[,naics:=tstrsplit(industry," ",keep=1)] #Extract the NAICS codes (and a few other things)
naics.noc <- naics.noc[geography== "Ontario - Total  (4.7%)"] #Filter it out do only Ontario is taken - make sure to update this to Canada when relevant
naics.noc <- naics.noc[nchar(naics)==4] #Filter out and only retain 4 NOC codes
naics.noc <- naics.noc[nchar(noc)==4] #Filter out and only retain 4 NAICS codes
naics.noc[,geography:=NULL] #Set geography to null since we only care about Ontario right now
naics.noc[,tech:=0] #Set tech as 0
naics.noc[occupation %in% individual.ranking[tech==1,noc_title],tech:=1] #Set tech dummy for occupation as 1
#These 4 lines calculate the % of tech occupations in a given industry
naics.noc[,tot:=sum(count),by=naics]
naics.noc.sum <- naics.noc[tech==1,.(sum(count),unique(tot)),by=industry]
names(naics.noc.sum) <- c("industry","tech","tot")
naics.noc.sum[,pct:=100*tech/tot]
#Set tech quotients
naics.noc.sum[,tech.dum:=0]
naics.noc.sum[pct>15,tech.dum:=1]
tech.occ <- fread("tech.sector.def.csv")
tech.occ <- tech.occ[tech==1] #Only selects for occupations with tech occupation = 1 for demographic purposes
noc.dem <- fread("NOC_Demographics/NOC_demo.csv") #Load in noc demographic file
names(noc.dem) <- c("CENSUS.YEAR","GEO.CODE","GEO.LEVEL","GEO.NAME","GNR","DATA.QUAL.FLAG","ALT.GEO.CODE","LF.STATUS","LF.STATUS.ID",
"LF.STATUS.NOTE","AGE","AGE.ID","AGE.NOTE","SEX","SEX.ID","SEX.NOTE","NOC","NOC.ID","NOC.NOTE","TOT","WORKER.NA","TOT.WORKER",
"TOT.EMP","TOT.SLF.EMP") #Change the names of the columns
noc.dem <- noc.dem[TOT>0] #Remove everything that has 0 count for the total number
noc.dem[,NOC.NUM:=tstrsplit(NOC," ",keep=1)] #Extract the NOC codes
noc.dem <- noc.dem[nchar(NOC.NUM)==4] #Filter for everything but 4-level NOCs
noc.dem[,NOC.NUM:=NULL] #Set NOC to NULL
#At this point, should have 2,293,895 rows. Check if that's not the case
age.10 <- c(2,6,9,10,11,12,13) #Define the age category
noc.dem[,tech:=0] #Set the tech flag vs non tech flag
noc.dem[NOC %in% tech.occ[,noc_title],tech:=1] #Set the tech flag
#Add up by tech worker vs non tech worker
noc.dem.tech.map <- noc.dem[GEO.LEVEL == "2" &
LF.STATUS.ID==1 &
AGE.ID==1 &
SEX.ID==1 ,
sum(TOT) , by=.(tech,ALT.GEO.CODE,GEO.NAME)]
noc.dem.tech.map[,tot:=sum(V1),by=ALT.GEO.CODE] #Add the sum for each geographic area
noc.dem.tech.map <- noc.dem.tech.map[tech==1] #Filter out so only retain one set
noc.dem.tech.map[,pct:=V1/tot*100] #Calculate % concentration by geography
noc.dem.tech.map[,c("tech","GEO.NAME","V1","tot"):=NULL] #Remove all the redundant columns
fig.noc.tech.map <- plot.map.cma.bf(value.data=noc.dem.tech.map,
plot.title = "Geographic Concentration of Technology Occupations Across Canada",
plot.fig.num = "Figure x",
legend.title = "Percentage Concentration of Tech Occupations",
caption = "Source: 2016 Canadian Census, BII+E Analysis")
fig.noc.tech.map.bc <- plot.map.cma.bf(province.name = c("BC"),
value.data=noc.dem.tech.map[str_sub(ALT.GEO.CODE,1,2) =="59"],
plot.title = "Geographic Concentration of Technology Occupations Across British Columbia",
plot.fig.num = "Figure x",
legend.title = "Percentage Concentration of Tech Occupations",
caption = "Source: 2016 Canadian Census, BII+E Analysis")
fig.noc.tech.map.ab <- plot.map.cma.bf(province.name = c("AB"),
value.data=noc.dem.tech.map[str_sub(ALT.GEO.CODE,1,2) =="48"],
plot.title = "Geographic Concentration of Technology Occupations Across Alberta",
plot.fig.num = "Figure x",
legend.title = "Percentage Concentration of Tech Occupations",
caption = "Source: 2016 Canadian Census, BII+E Analysis")
fig.noc.tech.map.sk <- plot.map.cma.bf(province.name = c("SK"),
value.data=noc.dem.tech.map[str_sub(ALT.GEO.CODE,1,2) =="47"],
plot.title = "Geographic Concentration of Technology Occupations Across Saskachewan",
plot.fig.num = "Figure x",
legend.title = "Percentage Concentration of Tech Occupations",
caption = "Source: 2016 Canadian Census, BII+E Analysis")
fig.noc.tech.map.mb <- plot.map.cma.bf(province.name = c("MB"),
value.data=noc.dem.tech.map[str_sub(ALT.GEO.CODE,1,2) =="46"],
plot.title = "Geographic Concentration of Technology Occupations Across Manitoba",
plot.fig.num = "Figure x",
legend.title = "Percentage Concentration of Tech Occupations",
caption = "Source: 2016 Canadian Census, BII+E Analysis")
fig.noc.tech.map.on <- plot.map.cma.bf(province.name = c("ON"),
value.data=noc.dem.tech.map[str_sub(ALT.GEO.CODE,1,2) =="35"],
plot.title = "Geographic Concentration of Technology Occupations Across Ontario",
plot.fig.num = "Figure x",
legend.title = "Percentage Concentration of Tech Occupations",
caption = "Source: 2016 Canadian Census, BII+E Analysis")
fig.noc.tech.map.qc <- plot.map.cma.bf(province.name = c("QC"),
value.data=noc.dem.tech.map[str_sub(ALT.GEO.CODE,1,2) =="24"],
plot.title = "Geographic Concentration of Technology Occupations Across Quebec",
plot.fig.num = "Figure x",
legend.title = "Percentage Concentration of Tech Occupations",
caption = "Source: 2016 Canadian Census, BII+E Analysis")
fig.noc.tech.map
rm(fig.noc.tech.map.ab)
rm(fig.noc.tech.map.bc)
fig.noc.tech.map.west <- plot.map.cma.bf(province.name = c("BC","AB"),
value.data=noc.dem.tech.map[str_sub(ALT.GEO.CODE,1,2) %in% c("59","48")],
plot.title = "Geographic Concentration of Technology Occupations - West",
plot.fig.num = "Figure x",
legend.title = "Percentage Concentration of Tech Occupations",
caption = "Source: 2016 Canadian Census, BII+E Analysis")
fig.noc.tech.map.west
rm(fig.noc.tech.map.mb)
rm(fig.noc.tech.map.sk)
rm(fig.noc.tech.map.west)
fig.noc.tech.map.bc <- plot.map.cma.bf(province.name = c("BC"),
value.data=noc.dem.tech.map[str_sub(ALT.GEO.CODE,1,2) %in% c("59")],
plot.title = "Geographic Concentration of Technology Occupations Across British Columbia",
plot.fig.num = "Figure x",
legend.title = "Percentage Concentration of Tech Occupations",
caption = "Source: 2016 Canadian Census, BII+E Analysis")
fig.noc.tech.map.prairie <- plot.map.cma.bf(province.name = c("AB","SK","MB"),
value.data=noc.dem.tech.map[str_sub(ALT.GEO.CODE,1,2) %in% c("46","47","48")],
plot.title = "Geographic Concentration of Technology Occupations Across the Prairies",
plot.fig.num = "Figure x",
legend.title = "Percentage Concentration of Tech Occupations",
caption = "Source: 2016 Canadian Census, BII+E Analysis")
fig.noc.tech.map.prairie
province.data
fig.noc.tech.map.atlantic <- plot.map.cma.bf(province.name = c("NL","PE","NS","NB"),
value.data=noc.dem.tech.map[str_sub(ALT.GEO.CODE,1,2) %in% c("10","11","12","13")],
plot.title = "Geographic Concentration of Technology Occupations Across the Atlantic",
plot.fig.num = "Figure x",
legend.title = "Percentage Concentration of Tech Occupations",
caption = "Source: 2016 Canadian Census, BII+E Analysis")
fig.noc.tech.map.atlantic
fig.noc.tech.map.territories <- plot.map.cma.bf(province.name=c("YT","NT","NU"),
value.data = noc.dem.tech.map[str_sub(ALT.GEO.CODE,1,2) %in% c("60","61","62")],
plot.title = "Geographic Concentration of Technology Occupations Across the Territories",
plot.fig.num = "Figure x",
legend.title = "Percentage Concentration of Tech Occupations",
caption = "Source: 2016 Canadian Census, BII+E Analysis")
fig.noc.tech.map.territories
cma.data
fig.noc.tech.map.prairie
fig.noc.tech.map.atlantic
View(cma.data)
View(tech.occ)
export.bf.plot("tech.map.can",fig.noc.tech.map,p.width=14.5,p.height=10)
